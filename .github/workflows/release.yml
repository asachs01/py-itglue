name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write # to be able to publish a GitHub release
  issues: write # to be able to comment on released issues
  pull-requests: write # to be able to comment on released pull requests
  id-token: write # to enable use of OIDC for PyPI provenance

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Run unit tests
        run: |
          pip install -e .[dev,testing]
          python -m pytest tests/ -v --cov=itglue

      - name: Build project
        run: python -m build

      - name: Verify package integrity
        run: twine check dist/*

      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check and verify package version
        run: |
          CURRENT_VERSION=$(python -c "from itglue.version import __version__; print(__version__)")
          TARGET_VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "Current version: $CURRENT_VERSION"
          echo "Target version: $TARGET_VERSION"
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "Error: Tag version ($TARGET_VERSION) does not match package version ($CURRENT_VERSION)"
            exit 1
          else
            echo "Version is correct ($TARGET_VERSION)"
          fi

      - name: Extract release notes from CHANGELOG.md
        id: extract_release_notes
        run: |
          # Extract the release notes for this version from CHANGELOG.md
          version="${{ steps.extract_version.outputs.VERSION }}"
          echo "Extracting release notes for version $version"
          
          # Find the section for this version and extract until the next version or end
          awk -v version="$version" '
          BEGIN { found=0; content="" }
          /^## \[.*\] - / {
            if (found) exit
            if (match($0, /\[([^\]]+)\]/, arr) && arr[1] == version) found=1
            next
          }
          /^## \[.*\] - / && found { exit }
          found && !/^#/ { 
            if (content == "" && $0 == "") next  # Skip leading empty lines
            content = content $0 "\n" 
          }
          END { 
            # Remove trailing newlines
            gsub(/\n+$/, "", content)
            print content 
          }' CHANGELOG.md > release-notes.md
          
          echo "Release notes extracted to release-notes.md"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.extract_version.outputs.VERSION, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to TestPyPI (for pre-releases)
        if: contains(steps.extract_version.outputs.VERSION, '-')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

      - name: Publish to PyPI (for stable releases)
        if: ${{ !contains(steps.extract_version.outputs.VERSION, '-') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }} 